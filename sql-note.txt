
SQL语句

主键：指能够通过某个字段唯一区分出不同的记录；
   
选取主键的基本原则为：不使用任何业务相关的字段作为主键

主键小结：主键是关系表中记录的唯一标识。主键的选取非常重要：主键不要带有业务含义，而应该使用BIGINT自增或者GUID类型。主键也不应该允许NULL。

可以使用多个列作为联合主键，但联合主键并不常用。


show databases;   查看数据库表
use tables（表名）;  操作表




查询数据库表的数据：
1(全表查询)：SELECT * FROM <表名>                        查询表中所有的列（*代表全部列）
2(条件查询)：SELECT * FROM <表名> WHERE <条件表达式>      根据条件表达式查询数据
条件表达式： AND  (条件全满足)           OR（满足其中一个条件）        NOT（与条件不相等）          LIKE(使用LIKE判断相似)
	 <>vlaues (使用<>判断不相等)
3(投影查询)：SELECT 列1, 列2, 列3 FROM <表名>           查询显示对应的列的表数据，(as 可以对列名重命名)

4(分页查询)：LIMIT <M> OFFSET <N>         结果集从N记录开始，最多取M条。注意SQL记录集的索引从0开始。 
                                          LIMIT 15 OFFSET 30还可以简写成LIMIT 30, 15

5(聚合查询)：如果聚合查询的WHERE条件没有匹配到任何行，COUNT()会返回0，而SUM()、AVG()、MAX()和MIN()会返回NULL：
COUN(*):       	 表示查询所有列的行数
SUM              计算某一列的合计值，该列必须为数值类型
AVG		 计算某一列的平均值，该列必须为数值类型
MAX		 计算某一列的最大值
MIN		 计算某一列的最小值
每页3条记录，如何通过聚合查询获得总页数？     SELECT CEILING(COUNT(*) / 3) FROM <表名>;
GROUP BY <列名>    根据列名相同的分组
 
6(多表查询)：

7(连接查询)：
	内连接：  inner join
	1、先确定主表，仍然使用FROM <表1>的语法；
	2、再确定需要连接的表，使用INNER JOIN <表2>的语法；
	3、然后确定连接条件，使用ON <条件...>，这里的条件是s.class_id = c.id，表示students表的class_id列与classes表的id列	相同的行需要连接；
	4、可选：加上WHERE子句、ORDER BY等子句。

	外连接：  outer join


	LEFT OUTER JOIN，以及FULL OUTER JOIN。它们的区别是：
	INNER JOIN只返回同时存在于两张表的行数据，由于students表的class_id包含1，2，3，classes表的id包含1，2，3，4，所以，	INNER JOIN根据条件s.class_id = c.id返回的结果集仅包含1，2，3。

	RIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以NULL填充剩下的字段。

	LEFT OUTER JOIN则返回左表都存在的行。如果我们给students表增加一行，并添加class_id=5，由于classes表并不存在id=5的行	，所以，LEFT OUTER JOIN的结果会增加一行，对应的class_name是NULL：

	FULL OUTER JOIN 会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL：

查询结果的排序：（sql语句正序/倒序 asc 按升序排列(不用写，默认使用这个) desc 按降序排列）
1、SELECT * FROM <表名> ORDER BY 列名 ASC;                         根据列名从低到高排序(asc可以省略)
2、SELECT * FROM <表名> ORDER BY 列名 DESC;                    根据列名从高到低排序
3、SELECT * FROM <表名> ORDER BY 列名1 DESC, gender 列名2;        先按列1倒序，如果有相同分数的，再按列2排序：


插入数据基本语法：
INSERT INTO <表名> (字段1, 字段2, ...) VALUES (值1, 值2, ...);

更新数据基本语法：
UPDATE <表名> SET 字段1=值1, 字段2=值2, ... WHERE ...;
语句无where条件时，表中数据全部更新

删除数据基本语法：
DELETE FROM <表名> WHERE ...;
语句无where条件时，表中数据全部删除

创建数据库：
create database <数据库名>

删除数据库
drop database <数据库名>

切换数据库
use <数据库名>

查看当前数据库中的表
show table

查看表结构
desc  <表名>

查看创建表的sql语句
show create table <表名>

修改表就比较复杂。如果要给students表新增一列birth
ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL;
alter table <表名> add column <增加的列名> varchar(10) not null;

要修改birth列，例如把列名改为birthday，类型改为VARCHAR(20)：
ALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL;
alter table <表名> change column <列名> <修改后的列表> varchar(20) not null

删除列，使用：
ALTER TABLE students DROP COLUMN birthday;
alter table <表名> drop column <列名>


插入一条新记录（INSERT），记录不存在，REPLACE语句将插入新记录，如果记录已经存在，就先删除原记录，再插入新记录  (REPLACE)
replace into <表名>(列名1，列名2....) values(值1，值2....）


插入一条新记录（INSERT），记录不存在，INSERT语句将插入新记录，如果记录已经存在，就更新该记录,更新的字段由UPDATE指定
insert into <表名> (列名1，列名2....) values(值1，值2....) on duplicate key update <列名=values>


插入一条新记录（INSERT）,记录不存在，INSERT语句将插入新记录,如果记录已经存在，就啥事也不干直接忽略
insert ignore into <表名> (列名1，列名2....) values(值1，值2....）



查找数据：
普通查询
语法：select <列名> from <表名> [where <查询条件表达试>] [order by <排序的列名>[asc或desc]]

　　　
1).查询所有数据行和列

　　　　
例：select * from a

　　　　
说明：查询a表中所有行和

　　　

2).查询部分行列--条件查询

　　　　
例：select i,j,k from a where f=5

　　　　
说明：查询表a中f=5的所有行，并显示i,j,k３列

　　　

3).在查询中使用as更改列名

　　　　
例：select name as 姓名　from a where gender='男'

　　　　
说明：查询a表中性别为男的所有行，显示name列，并将name列改名为（姓名）显示

4).查询空行

　　　　
例：select name from a where email is null

　　　　
说明：查询表a中email为空的所有行，并显示name列；SQL语句中用is null或者is not null

 来判断是否为空行

　

5).在查询中使用常量

　　　　
例：select name '北京' as 地址 from　a

　　　　
说明：查询表a，显示name列，并添加地址列，其列值都为'北京'

6).查询返回限制行数(关键字：top )

　　　　
例１：select top 6 name from a

　　　　
说明：查询表a，显示列name的前６行，top为关键字（Oracle中没有top关键字

用rownum替代）


select * from a where rownum<6　　　

7).查询排序（关键字：order by , asc , desc）

　　　　
例：select name

 from a

 where grade>=60

 order by desc

　　　　
说明：查询表中成绩大于等于60的所有行，并按降序显示name列；默认为ＡＳＣ升序




２.模糊查询

　　　
1).使用like进行模糊查询

　　　　
注意：like运算副只用语字符串，

　　　　
例：select * from a where name like '赵%'

　　　　
说明：查询显示表a中，name字段第一个字为赵的记录

　　　

2).使用between在某个范围内进行查询

　　　　
例：select * from a where age between 18 and 20

　　　　
说明：查询显示表a中年龄在18到20之间的记录

　

3).使用in进行多个值查询(in后是多个的数据)


例：select name from a where address in ('北京','上海','唐山')

　　　　
说明：查询表a中address值为北京或者上海或者唐山的记录，显示name字段




３.分组查询

　　　
1).使用group by进行分组查询

　　　　
例：select studentID as 学员编号, AVG(score) as 平均成绩(注释:这里的score是列名)

 from score (注释:这里的score是表名)group by student ID



2).使用having子句进行分组筛选

　　　　
例：select studentID as 学员编号, AVG from score

 group by studentID

 having count(score)>1

　　　　
说明：接上面例子，显示分组后count(score)>1的行，由于where只能在没有分组

时使用，分组后只能使用having来限制条件，




４.多表联接查询

　　　
1).内联接

　　　　
①在where子句中指定联接条件

　　　　
例：select a.name,b.mark

　from a,b

 where a.name=b.name

　　　　
说明：查询表a和表b中name字段相等的记录，并显示表a中的name字段和表b中的mark字段